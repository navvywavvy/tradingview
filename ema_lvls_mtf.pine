// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© jmosullivan

// The exponential moving average (EMA) is tracks price over time, giving more importance to recent price data than 
// simple moving average (SMA). EMAs for larger timeframes are generally considered to be stronger supports/resistances 
// for price to move through than smaller timeframes. This indicator allows you to specify two different EMA lengths 
// that you want to track. Additionally, this indicator allows you to display not just the EMA levels of your currently 
// viewed timeframe on the chart, but also shows the EMA levels of up to 4 different timeframes on the same chart. This 
// allows you to quickly see if multiple EMA levels are aligning across different timeframes, which is an even stronger 
// indication that price is going to meet support or resistance when it meets those levels on the chart. There are a lot 
// of nice configuration options, like:
// 
// * Ability to customize the EMA lengths you want to track
// * Style customization (color, thickness, size)
// * Hide any timeframes/levels you aren't interested in
// * Labels on the chart so you can tell which plots are the EMA levels
// * Optionally display the plot as a horizontal line if all you care about is the EMA level right now

//@version=5
indicator("EMA Lvls MTF", overlay = true)

// Functions
tf_tostring(tf) =>
    string rtf = switch tf
    	"1" => "1m"
    	"2" => "2m"
    	"3" => "3m"
    	"5" => "5m"
    	"13" => "13m"
    	"15" => "15m"
    	"30" => "30m"
    	"45" => "45m"
    	"60" => "1h"
    	"120" => "2h"
    	"180" => "3h"
    	"240" => "4h"
    	"360" => "6h"
    	"480" => "8h"
    	"720" => "12h"
    	"D" => "1D"
    	"W" => "1W"
    	"M" => "1M"
    	=> tf // default
    rtf

tf_str(tf, suffix) =>
    tf_tostring(tf) + " " + str.tostring(suffix) + "ema"

do_label(do_lbl, ix_loc, src, txt, txtsize, clr) =>
    if (do_lbl)
        var label lbl = na
        label.delete(lbl)
        lbl := label.new(x=ix_loc, y=src, text=txt, style=label.style_none, textcolor=clr, size=txtsize, textalign=text.align_left)

// Define some inputs to control style & visbility
grp_mn = "Global Line Settings"
show_labels         = input.bool    (group=grp_mn, defval=true,  title="Show Labels")
lbl_txtsize         = input.string  (group=grp_mn, defval=size.normal, title="Label Text Size", options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge])
lbl_offset          = input.int     (group=grp_mn, defval=4,     title="Label Offset",         minval=0, maxval=100)
lbl_stagger_offset  = input.int     (group=grp_mn, defval=0,     title="Label Offset Stagger", minval=0, maxval=20)
do_line             = input.bool    (group=grp_mn, defval=false, title="Do Horizontal Lines")
linewidth           = input.int     (group=grp_mn, defval=1,     title="Line Weight",          options=[1,2,3,4])
def_label_offset = 4
transparency = 50
ema1 = "EMA1"
ema2 = "EMA2"

grp_emas = "EMA Lengths"
ema1length = input.int(group=grp_emas, defval=12, title="EMA1", inline="emalength")
ema2length = input.int(group=grp_emas, defval=26, title="EMA2", inline="emalength")

grp_tfs = "Timeframe Settings"
il_1 = "inline_1"
def_clr_1 = color.new(color.aqua, transparency)
tf_1         = input.timeframe  (group=grp_tfs, inline=il_1, defval="60",      title="")
color_ema1_1 = input.color      (group=grp_tfs, inline=il_1, defval=def_clr_1, title="")
show_ema1_1  = input.bool       (group=grp_tfs, inline=il_1, defval=true,      title=ema1)
color_ema2_1 = input.color      (group=grp_tfs, inline=il_1, defval=def_clr_1, title="")
show_ema2_1  = input.bool       (group=grp_tfs, inline=il_1, defval=true,      title=ema2)

il_2 = "inline_2"
def_clr_2 = color.new(color.blue, transparency)
tf_2          = input.timeframe (group=grp_tfs, inline=il_2, defval="240",     title="")
color_ema1_2  = input.color     (group=grp_tfs, inline=il_2, defval=def_clr_2, title="")
show_ema1_2   = input.bool      (group=grp_tfs, inline=il_2, defval=true,      title=ema1)
color_ema2_2  = input.color     (group=grp_tfs, inline=il_2, defval=def_clr_2, title="")
show_ema2_2   = input.bool      (group=grp_tfs, inline=il_2, defval=true,      title=ema2)

il_3 = "inline_3"
def_clr_3 = color.new(color.orange, transparency)
tf_3          = input.timeframe (group=grp_tfs, inline=il_3, defval="720",     title="")
color_ema1_3  = input.color     (group=grp_tfs, inline=il_3, defval=def_clr_3, title="")
show_ema1_3   = input.bool      (group=grp_tfs, inline=il_3, defval=true,      title=ema1)
color_ema2_3  = input.color     (group=grp_tfs, inline=il_3, defval=def_clr_3, title="")
show_ema2_3   = input.bool      (group=grp_tfs, inline=il_3, defval=true,      title=ema2)

il_4 = "inline_4"
def_clr_4 = color.new(color.purple, transparency)
tf_4          = input.timeframe (group=grp_tfs, inline=il_4, defval="D",       title="")
color_ema1_4  = input.color     (group=grp_tfs, inline=il_4, defval=def_clr_4, title="")
show_ema1_4   = input.bool      (group=grp_tfs, inline=il_4, defval=true,      title=ema1)
color_ema2_4  = input.color     (group=grp_tfs, inline=il_4, defval=def_clr_4, title="")
show_ema2_4   = input.bool      (group=grp_tfs, inline=il_4, defval=true,      title=ema2)

// Define the lines to be plotted
ema_1_1 = show_ema1_1 ? request.security(syminfo.tickerid, tf_1, ta.ema(close, ema1length)) : na
ema_2_1 = show_ema2_1 ? request.security(syminfo.tickerid, tf_1, ta.ema(close, ema2length)) : na
ema_1_2 = show_ema1_2 ? request.security(syminfo.tickerid, tf_2, ta.ema(close, ema1length)) : na
ema_2_2 = show_ema2_2 ? request.security(syminfo.tickerid, tf_2, ta.ema(close, ema2length)) : na
ema_1_3 = show_ema1_3 ? request.security(syminfo.tickerid, tf_3, ta.ema(close, ema1length)) : na
ema_2_3 = show_ema2_3 ? request.security(syminfo.tickerid, tf_3, ta.ema(close, ema2length)) : na
ema_1_4 = show_ema1_4 ? request.security(syminfo.tickerid, tf_4, ta.ema(close, ema1length)) : na
ema_2_4 = show_ema2_4 ? request.security(syminfo.tickerid, tf_4, ta.ema(close, ema2length)) : na

// plot them
plot_offset = do_line ? -9999 : 0
plot(ema_1_1, color=color_ema1_1, title="TF1 EMA1", trackprice=do_line, offset=plot_offset, editable=false, style=plot.style_line, linewidth=linewidth)
plot(ema_2_1, color=color_ema2_1, title="TF1 EMA2", trackprice=do_line, offset=plot_offset, editable=false, style=plot.style_line, linewidth=linewidth)
plot(ema_1_2, color=color_ema1_2, title="TF2 EMA1", trackprice=do_line, offset=plot_offset, editable=false, style=plot.style_line, linewidth=linewidth)
plot(ema_2_2, color=color_ema2_2, title="TF2 EMA2", trackprice=do_line, offset=plot_offset, editable=false, style=plot.style_line, linewidth=linewidth)
plot(ema_1_3, color=color_ema1_3, title="TF3 EMA1", trackprice=do_line, offset=plot_offset, editable=false, style=plot.style_line, linewidth=linewidth)
plot(ema_2_3, color=color_ema2_3, title="TF3 EMA2", trackprice=do_line, offset=plot_offset, editable=false, style=plot.style_line, linewidth=linewidth)
plot(ema_1_4, color=color_ema1_4, title="TF4 EMA1", trackprice=do_line, offset=plot_offset, editable=false, style=plot.style_line, linewidth=linewidth)
plot(ema_2_4, color=color_ema2_4, title="TF4 EMA2", trackprice=do_line, offset=plot_offset, editable=false, style=plot.style_line, linewidth=linewidth)

if (show_labels)
    offset_ema1_1 = lbl_offset
    offset_ema2_1 = lbl_offset + (lbl_stagger_offset*1)
    offset_ema1_2 = lbl_offset + (lbl_stagger_offset*2)
    offset_ema2_2 = lbl_offset + (lbl_stagger_offset*3)
    offset_ema1_3 = lbl_offset + (lbl_stagger_offset*4)
    offset_ema2_3 = lbl_offset + (lbl_stagger_offset*5)
    offset_ema1_4 = lbl_offset + (lbl_stagger_offset*6)
    offset_ema2_4 = lbl_offset + (lbl_stagger_offset*7)
    do_label(show_ema1_1, bar_index[0] + offset_ema1_1, ema_1_1, tf_str(tf_1, ema1length), lbl_txtsize, color_ema1_1)
    do_label(show_ema2_1, bar_index[0] + offset_ema2_1, ema_2_1, tf_str(tf_1, ema2length), lbl_txtsize, color_ema2_1)
    do_label(show_ema1_2, bar_index[0] + offset_ema1_2, ema_1_2, tf_str(tf_2, ema1length), lbl_txtsize, color_ema1_2)
    do_label(show_ema2_2, bar_index[0] + offset_ema2_2, ema_2_2, tf_str(tf_2, ema2length), lbl_txtsize, color_ema2_2)
    do_label(show_ema1_3, bar_index[0] + offset_ema1_3, ema_1_3, tf_str(tf_3, ema1length), lbl_txtsize, color_ema1_3)
    do_label(show_ema2_3, bar_index[0] + offset_ema2_3, ema_2_3, tf_str(tf_3, ema2length), lbl_txtsize, color_ema2_3)
    do_label(show_ema1_4, bar_index[0] + offset_ema1_4, ema_1_4, tf_str(tf_4, ema1length), lbl_txtsize, color_ema1_4)
    do_label(show_ema2_4, bar_index[0] + offset_ema2_4, ema_2_4, tf_str(tf_4, ema2length), lbl_txtsize, color_ema2_4)

